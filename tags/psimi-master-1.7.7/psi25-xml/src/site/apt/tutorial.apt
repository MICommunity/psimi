 -----
 Tutorial
 -----
 Samuel Kerrien
 -----
 16 Jun 2008
 -----




How to read PSI-MI XML 2.5 data ?

  The API provides a user friendly way to load PSI-MI data originating from File, URL and InputStream.
  Here's how a file would be loaded:

+----------+
        PsimiXmlReader pr = new PsimiXmlReader();
        EntrySet entrySet = pr.read( new File( "path/to/data.xml" ) );
+----------+

  Should you be trying to read large data file, you could look further down this page to learn how to use the streaming API.

How to use the PSI-MI XML data model ?

  The model has been designed to reflect as much as possible the structure and the naming of the underlying XML schema.
  If you know it already, you should feel very comfortable with the Java model.
  Here is an example printing all interactions of an entrySet and its participant type, name and role.

+----------+
        for ( Entry entry : entrySet.getEntries() ) {

            // browse all interaction
            for ( Interaction interaction : entry.getInteractions() ) {
                System.out.println( interaction.getNames().getShortLabel() );

                // browse all participants
                for ( Participant participant : interaction.getParticipants() ) {

                    Interactor interactor = participant.getInteractor();
                    String name = interactor.getNames().getShortLabel();
                    String type = interactor.getInteractorType().getNames().getShortLabel();

                    String role = "none";
                    if ( participant.hasBiologicalRole() ) {
                        role = participant.getBiologicalRole().getNames().getShortLabel();
                    }

                    System.out.println( type + ": " + name + " (" + role + ")" );
                }
            }
        }
+----------+


How to write PSI-MI XML 2.5 data ?

  Given an EntrySet, one can output PSI-MI XML onto a variety of data format.

+----------+
        PsimiXmlWriter writer = new PsimiXmlWriter();
        writer.write( entrySet, new File( "path/to/outputfile.xml" ) );
+----------+


How to use the PSI-MI XML Lightweight API ?

  Should you be willing to process large amount of data with the PSI-MI XML25 Parser, we provide some tools to help you
  do this. Currently we provide methods to iterate over experiments, interactors and interactions.
  The code snippet below illustrate how to iterate over all interactions in a given file.

  Note: prior to version 1.5.0 we use to use the class PsimiXmlPullReader to do this job. It has now been superceeded
  by PsimiXmlLightweightReader. In this approach, the class IndexedEntry becomes the main interface that allow one to
  work with the data (querying by id, iterating over lists...).

+----------+
        File file = new File( "path/to/intputfile.xml" );
        PsimiXmlLightweightReader reader = new PsimiXmlLightweightReader( file );
        final List<IndexedEntry> indexedEntries = reader.getIndexedEntries();
        for ( IndexedEntry indexedEntry : indexedEntries ) {
            Iterator<Interaction> ii = indexedEntry.unmarshallInteractionIterator();
            while ( ii.hasNext() ) {
                Interaction interaction = ii.next();

                // do something with this interaction...
            }
        }
+----------+


How to write data back to a file when using PSI-MI XML Lightweight API ?

  Now that you have learned how to access the data without loading the whole model in momory. One may wonder how to
  read data from the IndexedEntry, apply modifications to it (eg. add additional annotations or cross references) and
  write it back to a File. The main idea is that the user is going to read data from the IndexedEntry, alter some of
  the data and once the data is ready to be writen, simply write it straight away. We assume that the user is going to
  write the data in the order defined of the PSI-MI XML Schema definition. The example below is showing how to do that:

+----------+
        File file = new File( "path/to/inputfile.xml" );
        PsimiXmlLightweightReader reader = new PsimiXmlLightweightReader( file );
        final List<IndexedEntry> indexedEntries = reader.getIndexedEntries();
        // here we assume there's exactly one entry in the file
        final IndexedEntry entry = indexedEntries.iterator().next();

        final File outputFile = new File( getTargetDirectory(), "10320477.output.xml" );
        PsimiXmlLightweightWriter writer = new PsimiXmlLightweightWriter( outputFile );

        writer.writeStartDocument();
        writer.writeStartEntry( entry.unmarshallSource(), entry.unmarshallAvailabilityList() );

        final Iterator<Interaction> iterator = entry.unmarshallInteractionIterator();
        while ( iterator.hasNext() ) {
            Interaction interaction = iterator.next();
            writer.writeInteraction( interaction );
        }

        writer.writeEndEntry( entry.unmarshallAttributeList() );
        writer.writeEndDocument();
+----------+


How to retreive a single object without loading an entire data file ?

  When you have to process a specific set of objects (experiments, interactors and interactions) of which you know the
  id, you can load that object without having to load anything else. The code sample below illustrate how to retrieve
  an experiment knowing that its identifier in the file is 2:

+----------+
        File file = new File( "path/to/intputfile.xml" );
        PsimiXmlLightweightReader reader = new PsimiXmlLightweightReader( file );
        final List<IndexedEntry> indexedEntries = reader.getIndexedEntries();
        for ( IndexedEntry indexedEntry : indexedEntries ) {

            Interaction interaction = indexedEntry.unmarshallInteractionById( 43 );
            ExperimentDescription experiment = indexedEntry.unmarshallExperimentById( 21 );
            Interactor interactor = indexedEntry.unmarshallInteractorById( 38 );

            // do something with the data ...
        }
+----------+



