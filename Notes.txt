
Issue: currently the converters are taking care of storing experiments, interactions in DAOs.
       as such, we cannot do a pull parsing where we only iterate over interactions ...


       idea: the converters could simply convert and leave the resolution of references to the user.

       if we do not store object in DAOs from within the converters, we need to keep the reference in the model.
         -> update model to introduce the refences in adition to the real object reference
         -> remove the DAOFactory from the converters
         -> make the reference resolution happen outside the converters

     Places to update:

         - interaction                  ok
                - experiment            ok
                - experimentRef         ok
           converter                    ok
           pull parser resolution       ok

         - interaction                  ok
                - inferredInteraction   ok
                        - expRefList    ok
           converter                    ok
           pull parser resolution       ok

         - inferredInteraction                     ok    
                - InferredInteractionParticipant   ok
                    - featureRef                   ok
                    - participantRef               ok
           converter                               ok
           pull parser resolution                  ok

         - interaction                  ok
                - parameterList         ok
                      - parameter       ok
                            - expRef    ok
           converter                    ok
           pull parser resolution       ok

         - partitipant                  ok
                - interactorRef         ok
                - interactor            ok
                - interactionRef        ok
           converter                    ok
           pull parser resolution       ok


         - participant                                ok

                - participant identification method   ok
                    - expRefList                      ok
                  converter                           ok
                  pull parser resolution              ok

                - experimentalRoleList                ok
                    - expRefList                      ok
                  converter                           ok
                  pull parser resolution              ok

                - exp preparation list                ok
                    - expRefList                      ok
                  converter                           ok
                  pull parser resolution              ok

                - experimental interactor list        ok
                    - expRefList                      ok
                  converter                           ok
                  pull parser resolution              ok

                - host organism list                  ok
                    - hostOrganism                    ok
                          - expRefList                ok
                  converter                           ok
                  pull parser resolution              ok

                - confidence list                     ok
                    - expRefList                      ok
                  converter                           ok
                  pull parser resolution              ok

                - parameter list                      ok
                    - expRef                          ok
                  converter                           ok
                  pull parser resolution              ok

         - feature                 ok
                - expRefList       ok
           converter               ok


--------------------------------------------------------------------------------------------------------------

Tip: an easy way to see all the sub-types of a class is:
        - open the class
        - click on the name
        - CTRL+H
        - et voila, the hierarchy editor tells you everything.
     that's userful for types like BioSourceType and Parameter Type that are subclassed a few times.

--------------------------------------------------------------------------------------------------------------

BioSourceType has 3 classes extending it:

    psidev.psi.mi.xml.jaxb.ExperimentType.HostOrganismList.HostOrganism
    psidev.psi.mi.xml.jaxb.InteractorElementType.Organism
    and
    psidev.psi.mi.xml.jaxb.ParticipantType.HostOrganismList.HostOrganism
    the latter adding a list of experiment reference to the super class.

--------------------------------------------------------------------------------------------------------------

ParameterType has 2 classes extending it

    psidev.psi.mi.xml.jaxb.InteractionElementType.ParameterList.Parameter
    psidev.psi.mi.xml.jaxb.ParticipantType.ParameterList.Parameter

    Consequently we are building 2 distinct Converters to cope with these.
    Once the schema is fixed (creation of a complex type) we can revert to a single Converter.

--------------------------------------------------------------------------------------------------------------

ParameterType on interaction doesn't have its experimentRef optional.
Consequently, when not specified, JAXB read 0 !!

--------------------------------------------------------------------------------------------------------------

CvType with additional attributes

    example: ExperimentalRole

    result in the creation of a dedicated Converter: psidev.psi.mi.xml.converter.impl253.ExperimentalRoleConverter
    It would be good in the schema to create a comple type that model CvType + list of experiment reference.

--------------------------------------------------------------------------------------------------------------

OpenCvType with additional attributes

    example: ParticipantIdentificationMethod under Participant

    result in the creation of a dedicated Converter: psidev.psi.mi.xml.converter.impl253.ParticipantIdentificationMethodConverter
    It would be good in the schema to create a comple type that model OpenCvType + list of experiment reference.

--------------------------------------------------------------------------------------------------------------
