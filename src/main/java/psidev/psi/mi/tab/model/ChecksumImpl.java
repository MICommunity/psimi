package psidev.psi.mi.tab.model;

/**
 * Created with IntelliJ IDEA.
 * User: ntoro
 * Date: 13/06/2012
 * Time: 11:58
 * To change this template use File | Settings | File Templates.
 */
public class ChecksumImpl implements Checksum {

    /**
     * Generated with IntelliJ plugin generateSerialVersionUID.
     * To keep things consistent, please use the same thing.
     */
    private static final long serialVersionUID = -6688437635259747647L;

    /////////////////////////
    // Instance variables

    /**
     * Name of the checksum method in the PSI-MI CV
     */
    private String methodName;

    /**
     * Value of the checksum
     */
    private String checksum;


    //////////////////////
    // Constructors

    /**
     * Create a new ChecksumImpl object.
     *
     * @param methodName String with the PSI-MI name of the CVTerm
     * @param checksum String with the value generated by the method
     */
    public ChecksumImpl(String methodName, String checksum) {
        setMethodName(methodName);
        setChecksum(checksum);
    }

    /**
     * {@inheritDoc}
     */
    public String getMethodName() {
        return methodName;
    }

    /**
     * {@inheritDoc}
     */
    public void setMethodName(String methodName) {
        if ( methodName == null ) {
            throw new IllegalArgumentException( "Method name cannot be null." );
        }

        this.methodName = methodName;
    }
    /**
     * {@inheritDoc}
     */
    public String getChecksum() {
        return checksum;
    }

    /**
     * {@inheritDoc}
     */
    public void setChecksum(String checksum) {
        if ( checksum == null ) {
            throw new IllegalArgumentException( "Topic name cannot be null." );
        }

        this.checksum = checksum;
    }

    ///////////////////////////////
    // Object's override

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append( "Checksum=" );
        sb.append( "{methodName='" ).append( methodName ).append( '\'' );
        sb.append( ", checksum='" ).append( checksum ).append( '\'' );
        sb.append( '}' );
        return sb.toString();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals( Object o ) {
        if ( this == o ) {
            return true;
        }
        if ( o == null || getClass() != o.getClass() ) {
            return false;
        }

        final ChecksumImpl that = ( ChecksumImpl ) o;

        if ( !methodName.equals( that.methodName ) ) {
            return false;
        }
        if ( checksum != null ? !checksum.equals( that.checksum) : that.checksum != null ) {
            return false;
        }

        return true;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        int result;
        result = ( checksum != null ? checksum.hashCode() : 0 );
        result = 29 * result + methodName.hashCode();
        return result;
    }


}
