//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.05.20 at 10:58:57 AM BST 
//


package psidev.psi.mi.jami.xml253;

import psidev.psi.mi.jami.model.CvTerm;
import psidev.psi.mi.jami.model.Xref;
import psidev.psi.mi.jami.model.impl.DefaultCvTerm;
import psidev.psi.mi.jami.utils.comparator.xref.UnambiguousXrefComparator;
import psidev.psi.mi.jami.xml.PsiXmlUtils;
import psidev.psi.mi.jami.xml.XmlAnnotation;

import javax.xml.bind.annotation.*;
import java.io.Serializable;
import java.util.Collection;


/**
 * Refers to a unique object in an external database.
 * 
 * <p>Java class for dbReference complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="dbReference">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence minOccurs="0">
 *         &lt;element name="attributeList" type="{http://psi.hupo.org/mi/mif}attributeList"/>
 *       &lt;/sequence>
 *       &lt;attribute name="db" use="required">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;minLength value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="dbAc">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;minLength value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="id" use="required">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;minLength value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="secondary">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;minLength value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="version">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;minLength value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="refType">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;minLength value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="refTypeAc">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;minLength value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.PUBLIC_MEMBER)
@XmlType(name = "dbReferenceType", propOrder = {
    "annotations"
})
public class XmlXref
    implements Xref, Serializable
{

    private CvTerm database;
    private CvTerm qualifier;
    private String id;
    private String version;

    private String secondary;
    private Collection<XmlAnnotation> annotations;

    public XmlXref() {
    }

    public XmlXref(CvTerm database, String id, CvTerm qualifier) {
        if (database == null){
            throw new IllegalArgumentException("The database cannot be null.");
        }
        if (id == null || (id != null && id.length() == 0)){
            throw new IllegalArgumentException("The id cannot be null or empty.");
        }
        this.database = database;
        this.qualifier = qualifier;
        this.id = id;
    }

    @XmlTransient
    public CvTerm getDatabase() {
        if (this.database == null){
            this.database = new DefaultCvTerm(PsiXmlUtils.UNSPECIFIED);
        }
        return this.database;
    }

    @XmlAttribute(name = "id", required = true)
    public String getId() {
        if (this.id == null){
            this.id = PsiXmlUtils.UNSPECIFIED;
        }
        return this.id;
    }

    /**
     * Sets the value of the id property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setId(String value) {
        this.id = value != null ? (value.length() > 0 ? value : PsiXmlUtils.UNSPECIFIED) : PsiXmlUtils.UNSPECIFIED;
    }

    @XmlAttribute(name = "version")
    public String getVersion() {
        return this.version;
    }

    /**
     * Sets the value of the version property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setVersion(String value) {
        this.version = value;
    }

    @XmlTransient
    public CvTerm getQualifier() {
        return this.qualifier;
    }

    /**
     * Gets the value of the db property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @XmlAttribute(name = "db", required = true)
    public String getDb() {
        return getDatabase().getShortName();
    }

    /**
     * Sets the value of the db property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setDb(String value) {
        if (this.database == null && value != null){
            this.database = new DefaultCvTerm(value);
        }
        else if (this.database != null){
            this.database.setShortName(value != null ? value : PsiXmlUtils.UNSPECIFIED);
        }
    }

    /**
     * Gets the value of the dbAc property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @XmlAttribute(name = "dbAc")
    public String getDbAc() {
        return getDatabase().getMIIdentifier();
    }

    /**
     * Sets the value of the dbAc property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setDbAc(String value) {
        if (this.database == null && value != null){
            this.database = new DefaultCvTerm(PsiXmlUtils.UNSPECIFIED, value);
        }
        else if (this.database != null){
            this.database.setMIIdentifier(value);
        }
    }

    /**
     * Gets the value of the refType property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @XmlAttribute(name = "refType")
    public String getRefType() {
        return this.qualifier != null ? this.qualifier.getShortName() : null;
    }

    /**
     * Sets the value of the refType property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setRefType(String value) {
        if (this.qualifier == null && value != null){
            this.qualifier = new DefaultCvTerm(value);
        }
        else if (this.qualifier != null){
            if (this.qualifier.getMIIdentifier() == null && value == null){
                this.qualifier = null;
            }
            else {
                this.qualifier.setShortName(value != null ? value : PsiXmlUtils.UNSPECIFIED);
            }
        }
    }

    /**
     * Gets the value of the refTypeAc property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @XmlAttribute(name = "refTypeAc")
    public String getRefTypeAc() {
        return this.qualifier != null ? this.qualifier.getMIIdentifier() : null;
    }

    /**
     * Sets the value of the refTypeAc property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setRefTypeAc(String value) {
        if (this.qualifier == null && value != null){
            this.qualifier = new DefaultCvTerm(PsiXmlUtils.UNSPECIFIED, value);
        }
        else if (this.qualifier != null){
            if (PsiXmlUtils.UNSPECIFIED.equals(this.qualifier.getShortName()) && value == null){
                this.qualifier = null;
            }
            else {
                this.qualifier.setMIIdentifier(value);
            }
        }
    }


    /**
     * Gets the value of the secondary property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @XmlAttribute(name = "secondary")
    public String getSecondary() {
        return secondary;
    }

    /**
     * Sets the value of the secondary property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setSecondary(String value) {
        this.secondary = value;
    }


    /**
     * Gets the value of the attributeList property.
     * 
     * @return
     *     possible object is
     *     {@link psidev.psi.mi.jami.xml.XmlAnnotation }
     *
     */
    @XmlElementWrapper(name="attributeList")
    @XmlElement(name="attribute")
    public Collection<XmlAnnotation> getAnnotations() {
        return this.annotations;
    }

    /**
     * Sets the value of the attributeList property.
     *
     * @param value
     *     allowed object is
     *     {@link psidev.psi.mi.jami.xml.XmlAnnotation }
     *     
     */
    public void setAnnotations(Collection<XmlAnnotation> value) {
        this.annotations = value;
    }

    @Override
    public boolean equals(Object o) {

        if (this == o){
            return true;
        }

        // Xrefs are different and it has to be ExternalIdentifier
        if (!(o instanceof Xref)){
            return false;
        }

        return UnambiguousXrefComparator.areEquals(this, (Xref) o);
    }

    @Override
    public int hashCode() {
        return UnambiguousXrefComparator.hashCode(this);
    }

    @Override
    public String toString() {
        return database.toString() + ":" + id.toString() + (qualifier != null ? " (" + qualifier.toString() + ")" : "");
    }
}
